#!/usr/bin/env bash -eu
# @(#) relax: `archive` command
# completions

usage_archive () {
	cat <<-EOM
	usage: ${ME} archive <release> [-c <configuration>] [<xcodebuild-option>] ...

	EOM
}

# __find_xcscheme <scheme>
__find_xcscheme ()  {
	find $HERE -name "$1.xcscheme" \
	| while IFS= read file
	do
		if echo "$file" | grep "xcodeproj"; then
			break
		fi
	done
}

set_archive_config () {
	if [ ! $# = 2 ]; then 
		die "Fail to $FUNCNAME(): Bad argument"
	fi

	local xcscheme_path="$1"
	local configuration="$2"

	if [ ! -f "$xcscheme_path" ]; then
		die "$FUNCNAME(): not found $xcscheme_path"
	fi

	logi "$ARROW Set \""$configuration"\" to BuildConfiguration in xcscheme"
	sed -i ."$BAK_EXT" "/<ArchiveAction/,/<\/ArchiveAction>/s/buildConfiguration = \".*\"/buildConfiguration = \"$configuration\"/" "$xcscheme_path"
}

# make_archive <archive_path>
make_archive () {
	local archive_path="$1"
	shift

	### Update 'Configuration' in a xcscheme ###
	XCSCHEME_PATH="$(__find_xcscheme "$scheme")"
	if [[ -n "$XCSCHEME_PATH" ]]; then
		logi "Scheme file: $XCSCHEME_PATH"
		set_archive_config "$XCSCHEME_PATH" "$configuration"
		cp "$XCSCHEME_PATH" "$PRODUCT_BUILD_ROOT/${XCSCHEME_PATH##/*}"
	fi

	if [[ $OBJROOT =~ .*DerivedData.* ]] && [ -d "$OBJROOT" ]; then
		logi "$ARROW Clean DerivedData of $TARGETNAME"
		rm -rf $OBJROOT
		logi "Removed $OBJROOT"
	fi

	logi "$ARROW Archiving $scheme ($configuration) for $sdk SDK"

	### Finish update Info plist ###
	if [[ -n $INFO_PLIST_PATH ]]; then
		cp "$INFO_PLIST_PATH" "$PRODUCT_BUILD_ROOT/$(basename "$INFO_PLIST_PATH")"
	fi

	local params_file=$(get_build_params_file "$scheme" -sdk "$sdk" -archivePath "$archive_path")
	while read p; do params+=( "$p" ); done < $params_file

	# See https://developer.apple.com/library/content/technotes/tn2215/_index.html
	params+=(INSTALL_PATH="\$(LOCAL_APPS_DIR)")

	## If there is a Pods project, PRODUCT_BUNDLE_IDENTIFIER will
	## cause 'App installation failed' by the reason why 'Bundle identifiers
	## must be unique'. Because by default 'CFBundleIdentifier
	## (aka Bundle identifier)' is $(PRODUCT_BUNDLE_IDENTIFIER) in Info.plist
	## of each pod. So This line is commented out.
	## See https://goo.gl/x1tMpQ in detail.
	# params=("${params[@]}" PRODUCT_BUNDLE_IDENTIFIER="$PRODUCT_BUNDLE_IDENTIFIER")
	
	## If there is a Pods project, DEVELOPMENT_TEAM will cause these build errors
	##   XXXX does not support provisioning profiles, but provisioning profile 
	##   NO_SIGNING/ has been manually specified. Set the provisioning profile
	#    value to "Automatic" in the build settings editor.Â¬
	# params=("${params[@]}"  DEVELOPMENT_TEAM="$team_id")

	xcodebuild -showBuildSettings "${params[@]}" > "$PRODUCT_BUILD_ROOT/build-settings-${sdk}-${configuration}"

	params=("${params[@]}" "$@" clean archive)
	
	local logfile="$PRODUCT_BUILD_ROOT/archive.log"
	logi "Run: xcodebuild ${params[@]}"
	logi "Log: $logfile"

	rm -rf "${logfile}"
	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_VERBOSE".* ]]; then
		if [ -z $REL_LOG_FORMATTER ]; then
			xcodebuild "${params[@]}" 2>&1 |\
				tee "${logfile}"; test ${PIPESTATUS[0]} -eq 0 || return 1
		else
			xcodebuild "${params[@]}" > >(tee -a "${logfile}") 2> >(tee -a "${logfile}" >&2) |\
				${REL_LOG_FORMATTER}; test ${PIPESTATUS[0]} -eq 0 || return 1
		fi
	else
		xcodebuild "${params[@]}" > >(tee -a "${logfile}" >/dev/null) 2> >(tee -a "${logfile}" >&2) || return 1
	fi

	logi "Archived: $archive_path"
	ln -fs "$archive_path" "$LATEST_ARCHIVE"
}

PRODUCT_BUILD_ROOT=
LATEST_ARCHIVE=
INFO_PLIST_PATH=
XCSCHEME_PATH=

release=

while [ $# -ne 0 ];
do
	arg=$1
	shift
	case $arg in
	-h|--help)
		usage_archive
		fin
		;;
	--complete)
		prev=$1
		shift
		comp="-c"
		if ! [[ $prev =~ $prev ]]; then
			echo "$comp"
		fi
		fin
		;;
	-c)
		configuration=$1
		shift
		;;
	*)
		release=$arg
		;;
	esac
done

source $REL_TEMP_DIR/config

if test ${release:-undefined} = undefined; then
	usage_archive
	fin
fi

trap 'teardown_build' EXIT INT TERM
setup_build $release

data_root=$REL_RELEASE_ROOT/$release/$REL_DATA_DIR
mkdir -p "$data_root"

LATEST_ARCHIVE="$data_root/LATEST_ARCHIVE"

make_archive "$PRODUCT_BUILD_ROOT/$PRODUCT_NAME.xcarchive" "$@"
