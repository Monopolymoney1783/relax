#!/usr/bin/env bash -eu

###################
### Xcode Utils ###
###################

# __map_vals <release>
__map_vals () {
	local release=$1
	set +u
	test -z $scheme && \
		scheme=$(eval echo '$'REL_CONFIG_${release}_scheme)
	test -z $configuration && \
		configuration=$(eval echo '$'REL_CONFIG_${release}_configuration)
	test -z $sdk && \
		sdk=$(eval echo '$'REL_CONFIG_${release}_sdk)
	test -z $team_id && \
		team_id=$(eval echo '$'REL_CONFIG_${release}_team_id)
	test -z $provisioning_profile && \
		provisioning_profile=$(eval echo '$'REL_CONFIG_${release}_provisioning_profile)
	test -z $build_settings && \
		build_settings=( $(eval echo '$'{REL_CONFIG_${release}_build_settings[@]} ) )
	test -z $bundle_identifier && \
		bundle_identifier=$(eval echo '$'REL_CONFIG_${release}_bundle_identifier)
	test -z $bundle_version_format && \
		bundle_version_format=$(eval echo '$'REL_CONFIG_${release}_bundle_version_format)
	test -z $team_id && \
		team_id=$(eval echo '$'REL_CONFIG_${release}_team_id)
	test -z $export_option_method  && \
		export_option_method=$(eval echo '$'REL_CONFIG_${release}_export_options_method)
	test -z $export_option_upload_symbols && \
		export_option_upload_symbols=$(eval echo '$'REL_CONFIG_${release}_export_options_uploadSymbols)
	test -z $export_option_compile_bitcode && \
		export_option_compile_bitcode=$(eval echo '$'REL_CONFIG_${release}_export_options_compileBitcode)
	test -z $export_option_upload_bitcode && \
		export_option_upload_bitcode=$(eval echo '$'REL_CONFIG_${release}_export_options_uploadBitcode)
	test -z $export_option_thinning && \
		export_option_thinning=$(eval echo '$'REL_CONFIG_${release}_export_options_thinning)
	set -u

	if test -z $sdk; then
		sdk=iphoneos
	fi

	if [ -z $configuration ]; then
		is_default_configuration=true
	else
		is_default_configuration=false
	fi

	if test -z $scheme; then
		die "Undefined '$release' in Relfile"
	fi
}


# __check_scheme <scheme>
__check_scheme () {
	if find ./*.xcodeproj -name "$1".xcscheme |  grep '.*' > /dev/null; then
		:
	else
		die "Not found '$1' scheme in your project. You might need to make it shared by checking 'Shared' box"
	fi
}

# __replace_development_team <team-id>
__replace_development_team () {
	local team_id=$1

	for p in $(find $HERE -name project.pbxproj); do
		sed -i .$BAK_EXT -e "
		s:\(DEVELOPMENT_TEAM = \)\(.*\);:\1$team_id;:g;
		s:\(DevelopmentTeam = \)\(.*\);:\1$team_id;:g;
		" $p
	done
}

# load_xcode_build_settings <scheme> [<xcodebuild_options>]
load_xcode_build_settings () {
	local scheme=$1
	shift

	if test ! -d $REL_TEMP_DIR; then
		die "Not found Temporary directory"
	fi

	local cmd="xcodebuild -showBuildSettings"
	if test ! ${REL_CONFIG_workspace-undefined} == "undefined"; then
		cmd+=" -workspace $REL_CONFIG_workspace.xcworkspace"
	fi

	cmd+=" -scheme $scheme"

	if test $# -gt 0; then
		local options=("$@")
		cmd+=" ${options[@]}"
	fi

	if test ! -d $REL_TEMP_DIR/xcode-settings; then
		mkdir -p $REL_TEMP_DIR/xcode-settings;
	fi

	local xcode_settings_path="$REL_TEMP_DIR/xcode-settings/${cmd// /-}"

	logd ${cmd}

	if ! test -f "$xcode_settings_path"; then
		cmd+=" 2>/dev/null" # Get ride of 'DeveloperPortal: Using pre-existing current store at URL'
		cmd+=" | tail -n +2 | sed 's/^ *//' | sed 's/ = /=\"/'| grep -v -e UID -e VERSION_INFO_STRING | sed 's/$/\"/'"

		eval "$cmd" | while read line
		do 
			if [[ "$line" =~ ^\" ]]; then
				continue
			fi
			if [[ "$line" =~ ^"Build" ]]; then
				continue
			fi
			echo "export $line" >> "$xcode_settings_path"
		done
	fi

	if ! test -f "$xcode_settings_path"; then
		die "load_xcode_build_settings: Could not load the build settings."
	fi

	if [[ ${LOG_LEVEL:-undefined} =~ .*"$LOG_LEVEL_DEBUG".* ]]; then
		echo "$xcode_settings_path"
		cat "$xcode_settings_path"
	fi
	source "$xcode_settings_path"
	logd "$xcode_settings_path"
}

print_xcode_version() {
	xcodebuild -version
}

###############
# $1 -- command
# commands:
#     version
#     bundle_version 
#     bundle_identifier
#     bundle_identifier_prefix
# $2 -- info-plist
print_info_plist () {
	command=$1
	shift
	case $command in 
	version)
		echo $(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$1")
		;;
	bundle_version) 
		echo $(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$1")
		;;
	bundle_identifier)
		echo $(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$1" )
		;;
	bundle_identifier_prefix)
		local app_id=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$1" )
		echo "${app_id%.*}"
		;;
	*)
		usage
		die
		;;
	esac
}

teardown_build () {
	if [[ ${INFO_PLIST_PATH:-undefined} != undefined ]]; then
		if [[ -f $INFO_PLIST_PATH.$BAK_EXT ]]; then
			cp "$INFO_PLIST_PATH".$BAK_EXT "$INFO_PLIST_PATH"
		fi
	fi
	if [[ -f $REL_CONFIG_xcodeproj.xcodeproj/project.pbxproj.$BAK_EXT ]]; then
		rm $REL_CONFIG_xcodeproj.xcodeproj/*.$BAK_EXT
	fi
	if [[ -f $REL_CONFIG_xcodeproj.xcodeproj/project.pbxproj.org ]]; then
		mv $REL_CONFIG_xcodeproj.xcodeproj/project.pbxproj.org $REL_CONFIG_xcodeproj.xcodeproj/project.pbxproj
	fi
}

# prepare_build <release>
setup_build () {
	cp -a $REL_CONFIG_xcodeproj.xcodeproj/project.pbxproj $REL_CONFIG_xcodeproj.xcodeproj/project.pbxproj.org

	local release="$1"

	__map_vals "$release"

	__check_scheme "$scheme"

	## Replace TEAMID if needed
	if test "${team_id:-undefined}" != undefined; then
		__replace_development_team $team_id
	fi

	if [ -z $configuration ]; then
		load_xcode_build_settings $scheme -sdk "$sdk"
	else
		load_xcode_build_settings $scheme -configuration "$configuration" -sdk "$sdk"
	fi

	logi "$ARROW Setting up build configurations"
	logi "Configuration: $CONFIGURATION"
	configuration=$CONFIGURATION

	INFO_PLIST_PATH=$PRODUCT_SETTINGS_PATH

	# StaticLibrary doesn't have a Info.plist
	if [ -z $INFO_PLIST_PATH ]; then
		PRODUCT_BUILD_ROOT=$REL_RELEASE_ROOT/$release
		logi "Build Root: $PRODUCT_BUILD_ROOT"
		return
	fi

	cp $INFO_PLIST_PATH $INFO_PLIST_PATH.$BAK_EXT
	logd "Info plist: $INFO_PLIST_PATH"

	## Team ID
	if test ${DEVELOPMENT_TEAM:-undefined} = undefined; then
		die "Please update your project file with Xcode 8.0+"
	fi
	logi "Team ID: $DEVELOPMENT_TEAM"

	## Bundle Identifier
	if [[ "${bundle_identifier:-undefined}" != undefined ]]; then
		sed -i .$BAK_EXT \
		-e "s/\(PRODUCT_BUNDLE_IDENTIFIER = \)\($PRODUCT_BUNDLE_IDENTIFIER\);/\1$bundle_identifier;/" \
		$REL_CONFIG_xcodeproj.xcodeproj/project.pbxproj
	else # PRODUCT_BUNDLE_IDENTIFIER sometimes can be differenct from Info.plist
		# Should eval a CFBundleIdentifier value because it's can be $(PRODUCT_BUNDLE_IDENTIFIER)
		local info_plist_bundle_identifier=$(print_info_plist bundle_identifier "$INFO_PLIST_PATH")
		if [[ "$info_plist_bundle_identifier" != "\$(PRODUCT_BUNDLE_IDENTIFIER)" ]]; then
			if [[ $PRODUCT_BUNDLE_IDENTIFIER != "$info_plist_bundle_identifier" ]]; then
				logi "$ERR PRODUCT_BUNDLE_IDENTIFIER($PRODUCT_BUNDLE_IDENTIFIER) setting is different from the value($info_plist_bundle_identifier) of CFBundleIdentifier in Info.plist."
				die "$NOTE Please edit 'Product Bundle Identifier' in '$PRODUCT_NAME' > 'Build Settings' pane."
			fi
		fi
	fi

	if [[ -n $provisioning_profile ]]; then
		logi "$ARROW Change ProvisioningStyle to Manual for \"$provisioning_profile\""
		# Custom Sigining
		sed -i .$BAK_EXT \
		-e "/DevelopmentTeam/d; s/\(ProvisioningStyle = \)Automatic/\1Manual/" \
		$REL_CONFIG_xcodeproj.xcodeproj/project.pbxproj 
	fi

	# Support a project file not defining PRODUCT_BUNDLE_IDENTIFIER 
	if test ${PRODUCT_BUNDLE_IDENTIFIER:-undefined} = undefined; then
		PRODUCT_BUNDLE_IDENTIFIER="$(print_info_plist bundle_identifier $INFO_PLIST_PATH)"
		if [[ $PRODUCT_BUNDLE_IDENTIFIER =~ (.*)\${PRODUCT_NAME:rfc1034identifier}(.*) ]]; then
			PRODUCT_BUNDLE_IDENTIFIER="$(eval echo ${BASH_REMATCH[1]}$PRODUCT_NAME)"
			if test ! -z ${BASH_REMATCH[2]}; then
				PRODUCT_BUNDLE_IDENTIFIER+="${BASH_REMATCH[2]}"
			fi
		fi
	fi

	logi "Bundle Identifier: $PRODUCT_BUNDLE_IDENTIFIER"

	## Bundle Version
	if test "${bundle_version_format:-undefined}" = undefined; then
		BUNDLE_VERSION=$(print_info_plist bundle_version "$INFO_PLIST_PATH")
	else
		# update build version
		local version=$(print_info_plist version "$INFO_PLIST_PATH")
		local bundle=$(print_info_plist bundle_version "$INFO_PLIST_PATH")
		local abbcommit=$(git log -1 --format='%h')
		local branch=$(git symbolic-ref --short HEAD)
		local config=$(echo $configuration | tr [:upper:] [:lower:])

		test -z $bundle_version_format && BUNDLE_VERSION_FORMAT="%R-%C"
			
		BUNDLE_VERSION=$(echo "$bundle_version_format" | awk '
		{
			gsub(/%V/, "'"$version"'");
			gsub(/%v/, "'"$bundle"'");
			gsub(/%C/, "'"$configuration"'");
			gsub(/%R/, "'"$abbcommit"'");
			gsub(/%B/, "'"${branch//\//_}"'");
			print
		}') # See [Semantic Versioning 2.0.0](http://semver.org)
	fi
	if [ -z $BUNDLE_VERSION ]; then
		PRODUCT_BUILD_ROOT=$REL_RELEASE_ROOT/$release/$scheme
	else
		if [[ $BUNDLE_VERSION =~ (.*)\$\(CURRENT_PROJECT_VERSION\)(.*) ]]; then
			BUNDLE_VERSION="${BASH_REMATCH[1]}${CURRENT_PROJECT_VERSION}${BASH_REMATCH[2]}"
		fi
		logi "Bundle Version: $BUNDLE_VERSION"
		if [[ ! $BUNDLE_VERSION =~ "$configuration" ]]; then
			BUNDLE_VERSION=$BUNDLE_VERSION-$configuration
		fi
		PRODUCT_BUILD_ROOT=$(eval echo "$REL_RELEASE_ROOT/$release/$scheme-$BUNDLE_VERSION")
	fi
	logi "Build Root: $PRODUCT_BUILD_ROOT"
}


# update_archived_expanded [-i <bundle_identifier>] <dest-team> <app-path>
update_archived_entitlements_xcent () {
	local _bundle_identifier
	case $1 in
		-i)
			shift
			_bundle_identifier=$1
			shift
			;;
	esac

	local _src_team
	local _dest_team=$1
	local _app_path=$2
	local _entitlements_xcent=$REL_TEMP_DIR/entitlements_xcent

	#codesign -dv "${app_path}" 2>&1 | grep -e "Format\|Identifier\|Signed Time" > $REL_TEMP_DIR/codesign_info
	#local cs_team_id=$(cat $REL_TEMP_DIR/codesign_info | sed -ne "s/TeamIdentifier=\(.*\)/\1/p")

	local app_id=$(/usr/libexec/PlistBuddy -c "Print :application-identifier" $app_path/$ARCHIVED_ENTITLEMENTS_XCENT)
	_src_team=${app_id%%.*}

	cp "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" "$_entitlements_xcent"

	logv "$ARROW Original $ARCHIVED_ENTITLEMENTS_XCENT(TeamID: $_src_team)"
	cat "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" | logv
	if [ -z $_bundle_identifier ]; then
		sed -i -e "s/$_src_team/$_dest_team/g" $_entitlements_xcent
	else
		sed -i -e \
		"\
		s/$_src_team\([^<][^<]*\)/$_dest_team.$_bundle_identifier/g; \
		s/$_src_team</$_dest_team</g; \
		" $_entitlements_xcent
	fi
	logv "$ARROW Updated $ARCHIVED_ENTITLEMENTS_XCENT(TeamID: $_dest_team)"
	cat $_entitlements_xcent | logv

	cp "$_entitlements_xcent" "$app_path"/$ARCHIVED_ENTITLEMENTS_XCENT
}

declare -x -f __check_scheme __map_vals __replace_development_team
declare -x -f load_xcode_build_settings
declare -x -f print_info_plist print_xcode_version
declare -x -f setup_build teardown_build
declare -x -f update_archived_entitlements_xcent
