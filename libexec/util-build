#!/usr/bin/env bash -eu

###################
### Xcode Const ###
###################

export PROVISIONING_DST_DIR=~/Library/MobileDevice/Provisioning\ Profiles
export ARCHIVED_ENTITLEMENTS_XCENT=archived-expanded-entitlements.xcent

###################
### Xcode Utils ###
###################

export LATEST_ARCHIVE=
export LATEST_IPA=
export LATEST_EXPORT_DIR=

export PRODUCT_BUILD_ROOT=
export BUNDLE_VERSION=
export INFO_PLIST_PATH=
export XCODEBUILD_PID=

# find_mobileprovision <provisioning-profile-name>
find_mobileprovision () {
	[ $# = 1 ] || die "bad argument"
	local name="$1"

	local ret=$(\
		grep -rw "$PROVISIONING_DST_DIR" -e "$name" | \
		sed -n "s:[^\/]*\(\/.*mobileprovision\).*:\1:p" | \
		while IFS= read file; do
			local temp_file=$REL_TEMP_DIR/temp_mobileprovision
			dec_provisioning_profile "$file" -o "$temp_file"
			date=$(/usr/libexec/PlistBuddy -c "Print :CreationDate" $temp_file)
			echo $date"#"$file
		done | sort -ur | awk -F# '{ print $2 }' | head -n 1)
	[[ -n "$ret" ]] || echo ""
	echo "$ret"
}

# dec_provisioning_profile <provisioning-profile> [-o <out>]
dec_provisioning_profile () {
	local infile outfile result
	while [ $# -ne 0 ];
	do
		arg="$1"
		shift
		case $arg in
		-o)
			outfile="$1"
			shift
			;;
		*)
			infile="$arg"
			;;
		esac
	done


	set  +e
	# `2>/dev/null` will get rid of this error output. 
	# 'security: SecPolicySetValue: One or more parameters passed to a function were not valid.'
	{
	if [[ -n "$outfile" ]]; then
		$SECURITY cms -D -i "$infile" -o "$outfile"
	else
		$SECURITY cms -D -i "$infile"
	fi
	} 2>/dev/null
	result=$?

	if [[ $result != 0 ]]; then
		die "No valid certificates for $infile"
	fi
	set -e
}

# print_progress_time <pid>
print_progress_time () {
	local pid=$1
	local delay=0.16666666 # 0.016666666 * 10
	local stime=$(date "+%s")
	local i=1

	# For a interrupt timing issue
	trap "stty echo; tput cnorm;  \
		__kill_bg_xcodebuid_task $XCODEBUILD_PID;" INT TERM

	star="$BOLD"'\xE2\x88\x97'"$NC"
	lbr="$BLUE[$NC"
	rbr="$BLUE]$NC"
	sp=("$lbr$star  $rbr"  "$lbr $star $rbr"  "$lbr  $star$rbr"  "$lbr $star $rbr")

	# Invisible cursor.
	tput civis
	# Don't echo back any chars typed.
	stty -echo

	while ps -p $pid | grep -q $pid; do
		now=$(date "+%s")
		dt=$(date -r "$(( $now - $stime ))" "+%s")
		printf "\b${sp[i++%${#sp[*]}]} Time: ${dt}s\r"
		sleep $delay
	done

	tput el # Clear to end of line
	printf "Time: ${dt}s\n"

	# Retore tty and tput
	stty echo
	tput cnorm

	if wait $pid; then
		return 0
	else
		return 1
	fi
}

# progress_bar <pid>
progress_bar()
{
	local pid=$1
	local delay=0.75
	printf "["
	while ps -p $pid | grep -q $pid; do
		printf  "â–“"
		sleep $delay
	done
	if wait $pid; then
		printf "] done!\n"
		return 0
	else
		printf "]\n"
		return 1
	fi
}


__kill_bg_xcodebuid_task () {
	if [[ -n ${XCODEBUILD_PID} ]]; then
		if ps -p $XCODEBUILD_PID > /dev/null; then
			kill $XCODEBUILD_PID
		fi
	fi
}


# __is_distribution_profile <mobileprovision_file>
__is_distribution_profile () {
	local mobileprovision="$1"

	[[ -f "$mobileprovision" ]] || return

	temp_mobileprovision=$REL_TEMP_DIR/temp_mobileprovision

	dec_provisioning_profile "$mobileprovision" -o "$temp_mobileprovision"
	result=$?
	[[ $result = 0 ]] || return

	# Ref https://devforums.apple.com/message/84647#84647
	get_task_allow=$REL_TEMP_DIR/get-task-allow
	/usr/libexec/PlistBuddy -c "Print :Entitlements:get-task-allow" $temp_mobileprovision > $get_task_allow
	result=$?
	[[ $result = 0 ]] || return

	if cat "$get_task_allow" | grep -q false; then
		echo true
	else 
		echo false
	fi
}


# TODO It can be replacted with a ruby script.
# __map_vals <release>
__map_vals () {
	local release=$1
	set +u
	test -z $scheme && \
		scheme=$(eval echo '$'REL_CONFIG_${release}_scheme)
	test -z $configuration && \
		configuration=$(eval echo '$'REL_CONFIG_${release}_configuration)
	test -z $sdk && \
		sdk=$(eval echo '$'REL_CONFIG_${release}_sdk)
	test -z $team_id && \
		team_id=$(eval echo '$'REL_CONFIG_${release}_team_id)
	test -z $provisioning_profile && \
		provisioning_profile=$(eval echo '$'REL_CONFIG_${release}_provisioning_profile)
	test -z $build_settings && \
		build_settings=( $(eval echo '$'{REL_CONFIG_${release}_build_settings[@]} ) )
	test -z $bundle_identifier && \
		bundle_identifier=$(eval echo '$'REL_CONFIG_${release}_bundle_identifier)
	test -z $version && \
		version=$(eval echo '$'REL_CONFIG_${release}_version)
	test -z $bundle_version && \
		bundle_version=$(eval echo '$'REL_CONFIG_${release}_bundle_version)
	test -z $team_id && \
		team_id=$(eval echo '$'REL_CONFIG_${release}_team_id)
	test -z $export_option_method  && \
		export_option_method=$(eval echo '$'REL_CONFIG_${release}_export_options_method)
	test -z $export_option_upload_symbols && \
		export_option_upload_symbols=$(eval echo '$'REL_CONFIG_${release}_export_options_uploadSymbols)
	test -z $export_option_compile_bitcode && \
		export_option_compile_bitcode=$(eval echo '$'REL_CONFIG_${release}_export_options_compileBitcode)
	test -z $export_option_upload_bitcode && \
		export_option_upload_bitcode=$(eval echo '$'REL_CONFIG_${release}_export_options_uploadBitcode)
	test -z $export_option_thinning && \
		export_option_thinning=$(eval echo '$'REL_CONFIG_${release}_export_options_thinning)
	set -u

	if test -z $sdk; then
		sdk=iphoneos
	fi

	if [[ -z $release ]]; then
		die "Undefined '$release' in Relfile"
	fi
	if [[ -z $scheme ]]; then
		die "'scheme' of $release isn't defined in Relfile"
	fi
}


# __check_scheme <params> <scheme>
__check_scheme () {
	local build_params
	__setup_build_params

	#if find ./ -name "$1".xcscheme |  grep '.*' > /dev/null; then
	if xcodebuild "${build_params[@]}" -list | sed -n '/Schemes/,$ p' | grep "$1" > /dev/null; then
		:
	else
		die "Not found '$1' scheme in your project. You might need to make it shared by checking 'Shared' box"
	fi
}

# Update global/local 'build_params' variable
__setup_build_params () {
	if [[ ${REL_CONFIG_workspace-undefined} != "undefined" ]]; then
		build_params=( -workspace "$REL_CONFIG_workspace.xcworkspace" )
	else
		build_params=( -project "$REL_CONFIG_xcodeproj.xcodeproj" )
	fi
}

# __replace_development_team <team-id>
# PROJECT_FILE_PATH must be defined
__replace_development_team () {
	local team_id=$1

	sed -i.$BAK_EXT -e "
	s:\(DEVELOPMENT_TEAM = \)\(.*\);:\1$team_id;:g;
	s:\(DevelopmentTeam = \)\(.*\);:\1$team_id;:g;
	" "$PROJECT_FILE_PATH/project.pbxproj"

	export DEVELOPMENT_TEAM=$team_id
}

# get_build_base_params <scheme> [buildsettings=value] ...
get_build_params_file () {
	local scheme build_params xcode_build_params
	scheme="$1"
	shift

	xcode_build_params=$REL_TEMP_DIR/xcode_build_params
	rm -rf $xcode_build_params

	__setup_build_params

	build_params+=(-scheme "${scheme}")

	if test $# -gt 0; then
		for arg in "$@"
		do
			build_params+=( "$arg" )
		done
	fi
	
	[[ ${build_params[@]} =~ "-configuration" ]] || [[ -z $configuration ]] ||\
		build_params+=( -configuration "$configuration" )

	if [[ -n $provisioning_profile ]]; then
		build_params+=( PROVISIONING_PROFILE_SPECIFIER="$provisioning_profile" )
		local mobileprovision=$(find_mobileprovision "$provisioning_profile")
		[[ -n $mobileprovision ]] || die "Not found '$provisioning_profile' provisoning profile"

		# Should use development signing for archive. Refer to this session, 
		# https://developer.apple.com/videos/play/wwdc2016/401/.
		# But it's not working when exporint ana adhoc IPA file.
		# I confirmed It's working well in Xcode 7.3.1.
		if [[ "$(__is_distribution_profile "$mobileprovision")" = true ]]; then
			build_params+=( CODE_SIGN_IDENTITY="iPhone Distribution" )
		else
			build_params+=( CODE_SIGN_IDENTITY="iPhone Developer" )
		fi
	else
		build_params+=( CODE_SIGN_IDENTITY="iPhone Developer" )
	fi

	build_params+=( ONLY_ACTIVE_ARCH=NO DEBUG_INFORMATION_FORMAT=dwarf-with-dsym )


	if test "${build_settings:-undefined}" != undefined; then
		if test ${#build_settings[@]} -gt 0; then
			for s in "${build_settings[@]}"; do
				params+=( "${s//\{\}/ }" )
			done
		fi
	fi

	for e in "${build_params[@]}"
	do
		echo "$e" >> $xcode_build_params
	done

	echo "$xcode_build_params"
}


# FIXME This function doesn't load all xcode build settings.
# load_xcode_build_settings [<xcode_build_params_file>]
load_xcode_build_settings () {
	if test ! -d $REL_TEMP_DIR/xcode-settings; then
		mkdir -p $REL_TEMP_DIR/xcode-settings;
	fi

	local params=()
	if [[ $# = 1 ]]; then
		while read p
		do
			params+=( "$p" )
		done < $1
	fi

	logd "${params[@]}"

	local file_name
	file_name="${params[@]}"
	file_name="${file_name// /-}"
	local xcode_settings_file="$REL_TEMP_DIR/xcode-settings/${file_name//\"/}"
	local export_xcode_settings="$REL_TEMP_DIR/xcode-settings/${file_name//\"/}-export"

	if ! test -f "$xcode_settings_file"; then
		# Get ride of 'DeveloperPortal: Using pre-existing current store at URL'

		xcodebuild -showBuildSettings "${params[@]}" 2>/dev/null >"$xcode_settings_file"

		cat "$xcode_settings_file" | tail -n +2 | \
		sed -e "
		s/^ *//;
		s/ = /='/;
		s/$/'/;
		" | \
		grep \
		-e "CONFIGURATION\|INFOPLIST_PATH\|PRODUCT_SETTINGS_PATH"\
		-e "PRODUCT_BUNDLE_IDENTIFIER\|DEVELOPMENT_TEAM"\
		-e "FULL_PRODUCT_NAME\|PRODUCT_NAME\|TARGETNAME"\
		-e "PROJECT_DIR\|PROJECT_FILE_PATH\|PROJECT_NAME"\
		-e "CODESIGNING_FOLDER_PATH\|TARGET_BUILD_DIR\|BUILT_PRODUCTS_DIR"\
		-e "OBJROOT\|PUBLIC_HEADERS_FOLDER_PATH" \
		-e "DWARF_DSYM_FILE_NAME\|DWARF_DSYM_FOLDER_PATH" \
		-e "CURRENT_PROJECT_VERSION" \
		| while read line
		do 
			echo "export $line" >> "$export_xcode_settings"
		done
	fi

	if ! test -f "$export_xcode_settings"; then
		die "load_xcode_build_settings: Could not load the build settings."
	fi

	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_DEBUG".* ]]; then
		echo "$export_xcode_settings"
		cat "$export_xcode_settings"
	fi
	source "$export_xcode_settings"
	logd "$export_xcode_settings"
}

print_xcode_version() {
	xcodebuild -version
}

###############
# $1 -- command
# commands:
#     version
#     bundle_version 
#     bundle_name
#     bundle_identifier
#     bundle_identifier_prefix
# $2 -- info-plist
print_info_plist () {
	command=$1
	shift
	case $command in 
	version)
		echo $(/usr/libexec/PlistBuddy -c \
			"Print :CFBundleShortVersionString" "$1" 2>&1\
			| grep -v "Does Not Exist")
		;;

	bundle_name)
		echo $(/usr/libexec/PlistBuddy -c \
			"Print :CFBundleName" "$1" 2>&1\
			| grep -v "Does Not Exist")
		;;
	bundle_version) 
		echo $(/usr/libexec/PlistBuddy -c \
			"Print :CFBundleVersion" "$1" 2>&1\
			| grep -v "Does Not Exist")
		;;
	bundle_identifier)
		echo $(/usr/libexec/PlistBuddy -c\
			"Print :CFBundleIdentifier" "$1" 2>&1\
			| grep -v "Does Not Exist")
		;;
	bundle_identifier_prefix)
		local app_id=$(/usr/libexec/PlistBuddy -c\
			"Print :CFBundleIdentifier" "$1" 2>&1\
			| grep -v "Does Not Exist")
		echo "${app_id%.*}"
		;;
	*)
		usage
		die
		;;
	esac
}

teardown_build () {
	__kill_bg_xcodebuid_task

	if [[ ${INFO_PLIST_PATH:-undefined} != undefined ]]; then
		if [[ -f $INFO_PLIST_PATH.$BAK_EXT ]]; then
			cp "$INFO_PLIST_PATH".$BAK_EXT "$INFO_PLIST_PATH"
		fi
	fi
	if [[ ${PROJECT_FILE_PATH:-undefined} != undefined ]]; then
		if [[ -f "$PROJECT_FILE_PATH"/project.pbxproj.$BAK_EXT ]]; then
			rm "$PROJECT_FILE_PATH"/*.$BAK_EXT
		fi
		if [[ -f "$PROJECT_FILE_PATH"/project.pbxproj.org ]]; then
			mv "$PROJECT_FILE_PATH"/project.pbxproj.org "$PROJECT_FILE_PATH"/project.pbxproj
		fi
	fi
}

# setup_build [--export <archive-path>] <release>
setup_build () {
	local for_export=false
	local archived_info_plist version

	case "$1" in
	--export) 
		for_export=true
		shift
		archived_info_plist="$1"/Info.plist
		shift
		;;
	esac

	if test ! -d $REL_TEMP_DIR; then
		die "Not found Temporary directory"
	fi

	local release stdtemp build_settings_file params_file

	release="$1"

	if [[ ! " ${REL_RELEASES[@]} " =~ " ${release} " ]]; then
		die "'$release' is undefined."
	fi

	{
		stdtemp=$REL_TEMP_DIR/stdtemp
		build_settings_file=$REL_TEMP_DIR/build_settings_file
		set +e
		$LIBEXEC_DIR/config_parser.rb \
			"$REL_CONFIG_PATH" "$release" >"${build_settings_file}" \
			2>"${stdtemp}"
		if [[ $? != 0 ]]; then
			printf "$ERR "; cat "${stdtemp}"
			die "Failed to parse $REL_CONFIG_PATH"
		fi
		set -e
	}
	source "${build_settings_file}"

	__map_vals "$release"
	__check_scheme "$scheme"

	params_file=$(get_build_params_file "$scheme")

	load_xcode_build_settings $params_file
	cp -a "$PROJECT_FILE_PATH"/project.pbxproj "$PROJECT_FILE_PATH"/project.pbxproj.org

	if [[ "${team_id:-undefined}" != undefined ]]; then
		__replace_development_team $team_id
	fi

	if [[ "${FULL_PRODUCT_NAME:-undefined}" = undefined ]]; then
		die "This scheme($scheme) isn't for an Application, Framework or Library target"
	fi


	logi "$ARROW Set up '$release' configurations"
	logi "Configuration: $CONFIGURATION"
	configuration=$CONFIGURATION

	INFO_PLIST_PATH="$PRODUCT_SETTINGS_PATH"

	# StaticLibrary doesn't have a Info.plist
	if [ -z $INFO_PLIST_PATH ]; then
		PRODUCT_BUILD_ROOT="$REL_RELEASE_ROOT/$release/$scheme"
		logi "Build Root: $PRODUCT_BUILD_ROOT"
		mkdir -p "$PRODUCT_BUILD_ROOT"
		return
	fi

	cp "$INFO_PLIST_PATH" "$INFO_PLIST_PATH.$BAK_EXT"
	logv "Info plist: $INFO_PLIST_PATH"

	set +e
	$LIBEXEC_DIR/update_info_plist.rb "$REL_CONFIG_PATH" "$release" "$INFO_PLIST_PATH" >/dev/null 2>"${stdtemp}"
	if [[ $? != 0 ]]; then
		printf "$ERR "; cat "${stdtemp}"
		die "Failed to parse $REL_CONFIG_PATH"
	fi
	set -e

	## Team ID
	if test ${DEVELOPMENT_TEAM:-undefined} != undefined; then
		logi "Team ID: $DEVELOPMENT_TEAM"
	fi

	## Bundle Identifier
	if [[ "${bundle_identifier:-undefined}" != undefined ]]; then
		sed -i .$BAK_EXT \
		-e "s/\(PRODUCT_BUNDLE_IDENTIFIER = \)\($PRODUCT_BUNDLE_IDENTIFIER\);/\1$bundle_identifier;/" \
		"$PROJECT_FILE_PATH"/project.pbxproj
		/usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $bundle_identifier" "$INFO_PLIST_PATH"
		PRODUCT_BUNDLE_IDENTIFIER=$bundle_identifier
	elif [[ $for_export == true ]]; then
		PRODUCT_BUNDLE_IDENTIFIER="$(/usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleIdentifier" "$archived_info_plist")"
	fi

	## Support a xcode project file not including PRODUCT_BUNDLE_IDENTIFIER 
	if test ${PRODUCT_BUNDLE_IDENTIFIER:-undefined} = undefined; then
		PRODUCT_BUNDLE_IDENTIFIER="$(print_info_plist bundle_identifier $INFO_PLIST_PATH)"
		if [[ $PRODUCT_BUNDLE_IDENTIFIER =~ (.*)\${PRODUCT_NAME:rfc1034identifier}(.*) ]]; then
			PRODUCT_BUNDLE_IDENTIFIER="$(eval echo ${BASH_REMATCH[1]}$PRODUCT_NAME)"
			if [[ ! -z ${BASH_REMATCH[2]} ]]; then
				PRODUCT_BUNDLE_IDENTIFIER+="${BASH_REMATCH[2]}"
			fi
		fi
	else # PRODUCT_BUNDLE_IDENTIFIER sometimes can be differenct from Info.plist

		if [[ $for_export == true ]]; then
			:
		else
			local info_plist_bundle_identifier="$(print_info_plist bundle_identifier "$INFO_PLIST_PATH")";

			# Should eval a CFBundleIdentifier value because it's can be $(PRODUCT_BUNDLE_IDENTIFIER)
			if [[ "$info_plist_bundle_identifier" = "\$(PRODUCT_BUNDLE_IDENTIFIER)" ]]; then
				:
			else
				if [[ ${PRODUCT_BUNDLE_IDENTIFIER} != "$info_plist_bundle_identifier" ]]; then
					logi "$ERR PRODUCT_BUNDLE_IDENTIFIER($PRODUCT_BUNDLE_IDENTIFIER) setting is different from the value($info_plist_bundle_identifier) of CFBundleIdentifier in Info.plist."
					die "$NOTE Please edit 'Product Bundle Identifier' in '$PRODUCT_NAME' > 'Build Settings' pane."
				fi

				PRODUCT_BUNDLE_IDENTIFIER=$info_plist_bundle_identifier
			fi
		fi
	fi

	logi "Bundle Identifier: $PRODUCT_BUNDLE_IDENTIFIER"

	## Provisioning Profile
	if [[ -n $provisioning_profile ]]; then
		# Custom Sigining
		if grep -q ProvisioningStyle "$PROJECT_FILE_PATH"/project.pbxproj; then
			sed -i .$BAK_EXT \
			-e "s/\(ProvisioningStyle = \)Automatic/\1Manual/" \
			"$PROJECT_FILE_PATH"/project.pbxproj 
		else
			s='[[:space:] ]*'
			sed -i .$BAK_EXT \
			-e "s/\($s\)\(DevelopmentTeam = .*;\)/\1\2\\
			\1ProvisioningStyle = Manual;\
			/" "$PROJECT_FILE_PATH"/project.pbxproj 
		fi
		logi "$ARROW Change ProvisioningStyle to Manual for \"$provisioning_profile\""
	fi

	if [[ ${version:-undefined} == undefined ]]; then
		BUNDLE_SHORT_VERSION="$(print_info_plist version "$INFO_PLIST_PATH")"
	else
		BUNDLE_SHORT_VERSION="$version"
	fi


	if [[ $for_export == true && "${bundle_version:-undefined}" = undefined ]]; then
		BUNDLE_VERSION="$(/usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleVersion" "$archived_info_plist")"
		BUNDLE_SHORT_VERSION="$(/usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleShortVersionString" "$archived_info_plist")"
	else
		## Bundle Version
		local bundle=$(print_info_plist bundle_version "$INFO_PLIST_PATH")
		local abbcommit=$(git log -1 --format='%h')
		local branch=$(git symbolic-ref --short HEAD)
		local config=$(echo $configuration | tr [:upper:] [:lower:])

		if test "${bundle_version:-undefined}" = undefined; then
			BUNDLE_VERSION=$(print_info_plist bundle_version "$INFO_PLIST_PATH")
		else
			BUNDLE_VERSION=$bundle_version
		fi

		BUNDLE_VERSION=$(echo "$BUNDLE_VERSION" | awk '
		{
			gsub(/%V/, "'"$version"'");
			gsub(/%B/, "'"$bundle"'");
			gsub(/%C/, "'"$config"'");
			gsub(/%h/, "'"$abbcommit"'");
			gsub(/%D/, "'"${branch//\//_}"'");
			print
		}') # See [Semantic Versioning 2.0.0](http://semver.org)
	fi

	/usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $BUNDLE_SHORT_VERSION" "$INFO_PLIST_PATH"
	/usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUNDLE_VERSION" "$INFO_PLIST_PATH"

	logi "Version: $BUNDLE_SHORT_VERSION"
	logi "Bundle Version: $BUNDLE_VERSION"

	## Product Build Root
	if [ -z $BUNDLE_VERSION ]; then
		PRODUCT_BUILD_ROOT="$REL_RELEASE_ROOT/$release/$scheme"
	else
		if [[ $BUNDLE_VERSION =~ (.*)\$\(CURRENT_PROJECT_VERSION\)(.*) ]]; then
			BUNDLE_VERSION="${BASH_REMATCH[1]}${CURRENT_PROJECT_VERSION}${BASH_REMATCH[2]}"
		fi
		if [[ $for_export == false ]] && ! echo $BUNDLE_VERSION  | grep -iqF $configuration;  then
			BUNDLE_VERSION=$BUNDLE_VERSION-$configuration
		fi
		PRODUCT_BUILD_ROOT=$(eval echo "$REL_RELEASE_ROOT/$release/$scheme-$BUNDLE_VERSION")
	fi
	logi "Build Root: $PRODUCT_BUILD_ROOT"
	mkdir -p "$PRODUCT_BUILD_ROOT"
}


# update_archived_expanded [-i <bundle_identifier>] <dest-team> <app-path>
update_archived_entitlements_xcent () {
	local _bundle_identifier
	case $1 in
		-i)
			shift
			_bundle_identifier=$1
			shift
			;;
	esac

	local _src_team
	local _dest_team=$1
	local _app_path=$2
	local _entitlements_xcent=$REL_TEMP_DIR/entitlements_xcent

	#codesign -dv "${app_path}" 2>&1 | grep -e "Format\|Identifier\|Signed Time" > $REL_TEMP_DIR/codesign_info
	#local cs_team_id=$(cat $REL_TEMP_DIR/codesign_info | sed -ne "s/TeamIdentifier=\(.*\)/\1/p")

	local app_id=$(/usr/libexec/PlistBuddy -c "Print :application-identifier" "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" 2>/dev/null | grep -v "Does Not Exist")
	if [[ -z ${app_id} ]]; then
		logi "$WARN $ARCHIVED_ENTITLEMENTS_XCENT is empty."
		return
	fi

	logi "$ARROW Update $ARCHIVED_ENTITLEMENTS_XCENT. IPA file will be exported in $export_path"
	_src_team=${app_id%%.*}

	cp "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" "$_entitlements_xcent"

	logv "$ARROW Original $ARCHIVED_ENTITLEMENTS_XCENT(TeamID: $_src_team)"
	cat "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" | logv
	if [ -z $_bundle_identifier ]; then
		sed -i -e "s/$_src_team/$_dest_team/g" $_entitlements_xcent
	else
		sed -i -e \
		"\
		s/$_src_team\([^<][^<]*\)/$_dest_team.$_bundle_identifier/g; \
		s/$_src_team</$_dest_team</g; \
		" $_entitlements_xcent
	fi
	logv "$ARROW Updated $ARCHIVED_ENTITLEMENTS_XCENT(TeamID: $_dest_team)"
	cat $_entitlements_xcent | logv

	cp "$_entitlements_xcent" "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT"
}

declare -x -f print_progress_time progress_bar
declare -x -f __kill_bg_xcodebuid_task
declare -x -f __check_scheme __map_vals __replace_development_team __setup_build_params
declare -x -f load_xcode_build_settings get_build_params_file
declare -x -f print_info_plist print_xcode_version
declare -x -f setup_build teardown_build
declare -x -f update_archived_entitlements_xcent
declare -x -f find_mobileprovision
declare -x -f dec_provisioning_profile
declare -x -f __is_distribution_profile
