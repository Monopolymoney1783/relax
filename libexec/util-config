#!/bin/bash -eu
# @(#) relax: utils for configurations

############
### YAML ###
############

# generate_relfile <scheme> <profile> <project>
generate_relfile () {
	local project="$1"
	local scheme="$2"
	local profile="$3"

	[[ -n "$profile" ]] || profile='"<# Your Provisioning Profile #>"'

	cat <<-EOF > $REL_TEMP_DIR/Relfile
	#
	# Relax configuration YAML
	#
	
	EOF

	echo "version: '${RELFILE_VERSION}'" >> $REL_TEMP_DIR/Relfile

	if [[ $project  =~ (.*).xcworkspace ]]; then
		workspace_name=${BASH_REMATCH[1]}
		echo "" >> $REL_TEMP_DIR/Relfile
		echo "workspace: $workspace_name" >> $REL_TEMP_DIR/Relfile
		echo "" >> $REL_TEMP_DIR/Relfile
	elif [[ $project =~ (.*).xcodeproj ]]; then
		xcodeproj_name=${BASH_REMATCH[1]}
		echo "" >> $REL_TEMP_DIR/Relfile
		echo "xcodeproj: $xcodeproj_name" >> $REL_TEMP_DIR/Relfile
		echo "" >> $REL_TEMP_DIR/Relfile
	else
		die "Not found .xcodeproj/.xcworkspace file"
	fi

	cat <<-EOF >> $REL_TEMP_DIR/Relfile
	distributions:
	  adhoc:
	    scheme: ${scheme}
	    provisioning_profile: ${profile}
	EOF
}


config_get_distributions () {
	[[ -f "$1" ]] && relparser -f "$1" list
}

# config_load <config-path> <release> <base> <out>
config_gen_plist () {
	local stdtemp=$REL_TEMP_DIR/stdtemp
	local relfile=$1
	local dist=$2
	local base=$3
	local out=$4
	set +e
	relparser -f "$relfile" -plist "$base" -o "$out" plist "$dist" 2>"$stdtemp"
	if [[ $? != 0 ]]; then
		printf "$ERR "; cat "${stdtemp}"
		die "Failed to generate a info plist: $base -> $out"
	fi
	set -e
}

_check_config () {
	if [[ "${REL_CONFIG_xcodeproj:-undefined}" = undefined ]]; then
		if [[ "${REL_CONFIG_workspace:-undefined}" = undefined ]]; then
			die "Please configure 'xcodeproj:' or 'workspace:' field on the top of config file."
		fi
	fi

	if [[ ${REL_CONFIG_log_formatter:-undefined} != undefined ]]; then
		if which "$REL_CONFIG_log_formatter" > /dev/null; then
			export REL_LOG_FORMATTER="$REL_CONFIG_log_formatter"
		else
			logi "$WARN Relfile: \`${REL_CONFIG_log_formatter}\` isn't installed"
			export REL_LOG_FORMATTER=
		fi
	else
		export REL_LOG_FORMATTER=
	fi
}

# _config_load <config-path> [<release>]
_load_config() {
	###################################################################
	# NOTE: Escape an unbound error when a env var is used in Relfile #
	#       See sample/Relfile in this repository                     #
	###################################################################

	local stdtemp relfile dist out
	stdtemp=$REL_TEMP_DIR/stdtemp
	relfile="$1"
	out=$REL_TEMP_DIR/relfile_rc
	if [[ $# == 2 ]]; then
		dist="$2"
	fi

	set +e
	out="$(relparser -f "$relfile" source "$dist" 2>"$stdtemp")"
	if [[ $? != 0 ]]; then
		printf "$ERR "; cat "${stdtemp}"
		die "Failed to parse $relfile"
	fi
	set -e
	sed -i.bak '1i\
set +u\
' "$out"
	echo "set -u" >> "$out"

	source "$out"
}

config_find() {
	echo "$(find . -name $REL_CONFIG -maxdepth 1)"
}

# config_load <config-path> <release>
config_load () {
	if test ! -d $REL_TEMP_DIR; then
		die "config_load: Not found Temporary directory"
	fi

	if [ $# = 0 ]; then
		die "config_load: argument is invalid"
	fi


	local config_path dist
	config_path=$1
	if [[ $# == 2 ]]; then
		dist="$2"
	fi
	#logi "$ARROW Loading ${config_path#\./}"
	
	if [ -f "$config_path" ]; then
		_load_config "$config_path" "$dist"
	else
		message=$(
		cat <<-EOM
		$ERR Not found $REL_CONFIG in the current dir.
		Please run \`/path/to/$ME init\` here, and then set up a config file.
		EOM
		)
		die "$message"
	fi
	
	_check_config
}

declare -x -f _check_config _load_config
declare -x -f config_load config_find config_get_distributions config_gen_plist
declare -x -f generate_relfile
