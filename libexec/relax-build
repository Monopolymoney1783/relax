#!/usr/bin/env bash -eu
# @(#) relax: `build` command
# completions

usage_build() {
	cat <<-EOM
	usage: ${ME} build <release> [--framework] [-c <configuration>]
	options:
	    --framework		: Make a framework bundle from a static library
	    -c			: Specify a configuration
	EOM
}

# build_project <scheme> <sdk> <configuration>
build_project () {
	if test $# != 3; then
		die "build_project: bad argument"
	fi

	local scheme="${1}"
	local sdk="${2}"
	local config="${3}"

	logi "$ARROW Build $TARGETNAME ($config) for $sdk SDK"

	# Will rebuild the static library as specified
	#     build_static_library sdk

	local params_str="
	-project "${PROJECT_FILE_PATH##*/}"
	-scheme "${scheme}"
	-configuration "${config}"
	-sdk "${sdk}"
	ONLY_ACTIVE_ARCH=NO
	DEVELOPMENT_TEAM="$team_id"
	"
	local params=()

	while read -r line; do params+=($line); done <<< "$params_str"

	local build_suffix=$(echo "${sdk}-${config}" | tr "[:upper:]" "[:lower:]")
	local build_settings=build-settings-$build_suffix
	local build_log="$PRODUCT_BUILD_ROOT/build_$build_suffix.log"

	params=("${params[@]}"  CODE_SIGN_IDENTITY="iPhone Developer")
	params=("${params[@]}"  clean build)

	xcodebuild -showBuildSettings "${params[@]}" > "$PRODUCT_BUILD_ROOT/$build_settings"

	logi "Run: xcodebuild ${params[@]}"
	logi "Log: $build_log"

	if [[ "${LOG_LEVEL:-undefined}" =~ .*"$LOG_LEVEL_VERBOSE".* ]]; then
		if [ -z $REL_LOG_FORMATTER ]; then
			xcodebuild "${params[@]}" 2>&1 | tee $build_log; test ${PIPESTATUS[0]} -eq 0 || die
		else
			xcodebuild "${params[@]}" 2>&1 | tee $build_log | $REL_LOG_FORMATTER; test ${PIPESTATUS[0]} -eq 0 || die
		fi
	else
		xcodebuild "${params[@]}" >$build_log 2>&1 || die
	fi

	load_xcode_build_settings "$scheme" -configuration "$config" -sdk "$sdk"
	cp -a "$CODESIGNING_FOLDER_PATH" "$PRODUCT_BUILD_ROOT"/
	if [ -d "$CODESIGNING_FOLDER_PATH.dSYM" ]; then
		cp -a "$CODESIGNING_FOLDER_PATH.dSYM" "$PRODUCT_BUILD_ROOT"/
	fi
	logi "Product: $PRODUCT_BUILD_ROOT/${FULL_PRODUCT_NAME}"
}

# make_framework <iphoneos-product-path> <iphonesimulator-product-path> <location>
make_framework () {
	if test $# != 3; then
		die "make_framework: bad argument"
	fi

	local framework_loc="${3}"

	mkdir -p "${framework_loc}/Versions/A/"

	# Join the 2 static libs into 1 and push into the .framework
	xcrun lipo -create \
		"${1}" \
		"${2}" \
		-output "${3}/Versions/A/${PRODUCT_NAME}"

	# Create the path to the real Headers die
	mkdir -p "${framework_loc}/Versions/A/Headers"

	# Create the required symlinks
	/bin/ln -sfh A "${framework_loc}/Versions/Current"
	/bin/ln -sfh Versions/Current/Headers "${framework_loc}/Headers"
	/bin/ln -sfh "Versions/Current/${PRODUCT_NAME}" \
		"${framework_loc}/${PRODUCT_NAME}"

	if [ -d "${TARGET_BUILD_DIR}/$PUBLIC_HEADERS_FOLDER_PATH/" ]; then
		# Copy the public headers into the framework
		/bin/cp -a "${TARGET_BUILD_DIR}/$PUBLIC_HEADERS_FOLDER_PATH/" \
			"${framework_loc}/Versions/A/Headers"
	fi
}


# build_framework <scheme> <sdk> <configuration>
build_framework () {
	if test $# = 1; then
		die "build_framework: bad argument"
	fi

	local scheme="${1}"
	local sdk="${2}"
	local config="${3}"

	if [[ $OBJROOT =~ .*DerivedData.* ]] && [ -d "$OBJROOT" ]; then
		logi "$ARROW Clean DerivedData of $TARGETNAME"
		rm -rf $OBJROOT
		logi "Removed $OBJROOT"
	fi

	# If we're already inside this script then die
	if [ -n "$BUILD_CMD_SEMAPHORE" ]; then
		die "Already building framework"
	fi
	export BUILD_CMD_SEMAPHORE=1
	
	local static_lib="lib${PROJECT_NAME}.a"
	local current_sdk=""
	
	# 1 - Extract the platform (iphoneos/iphonesimulator) from the SDK name
	local sdk_platform=""
	if [[ "$sdk" =~ ([A-Za-z]+) ]]; then
		sdk_platform=${BASH_REMATCH[1]}
	else
		die "Could not find platform name from SDK: $sdk"
	fi

	# 2 - Extract the version from the SDK

	local sdk_version=""
	if [[ "$sdk" =~ ([0-9]+.*$) ]]; then
		sdk_version=${BASH_REMATCH[1]}
	fi

	current_sdk="${sdk_platform}${sdk_version}"
	build_project "$scheme" "$current_sdk" "$config"

	local built_product="$CODESIGNING_FOLDER_PATH"
	logi "${built_product}"

	## Build the other platform.
	# 3 - Determine the other platform
	if [ "$sdk_platform" == "iphoneos" ]; then
		other_platform=iphonesimulator
	else
		other_platform=iphoneos
	fi

	# 4 - Find the build directory
	current_sdk="${other_platform}${sdk_version}"
	build_project "$scheme" "$current_sdk" "$config"

	local other_built_product="$CODESIGNING_FOLDER_PATH"
	logi "${other_built_product}"

	logi "$ARROW Generate $TARGETNAME Framework ($config)"

	local framework_name=${PRODUCT_NAME}
	local framework_location="${PRODUCT_BUILD_ROOT}/${framework_name}.framework"

	make_framework "$built_product" "$other_built_product" "$framework_location"

	# Install module.modulemap if needed
	# FIXME
	if test -f "$HERE/module.modulemap"; then 
		logi "Found ${HERE}/modulemap"
		if ! test -d "${framework_location}/Modules"; then
			mkdir "${framework_location}/Modules"
		fi
		cp -a "$HERE/module.modulemap" "${framework_location}/Modules/"
		logi "Added ${framework_location}/Modules/modulemap"
	fi

	# Copy the framework to the user's desktop
	if test ${framework_location} != "${PRODUCT_BUILD_ROOT}/${framework_name}.framework"; then
		 ditto "${framework_location}" "${PRODUCT_BUILD_ROOT}/${framework_name}.framework"
	fi

	logi "framework: ${PRODUCT_BUILD_ROOT}/${framework_name}.framework"
}

BUILD_CMD_SEMAPHORE=

is_framework=false

while [ $# -ne 0 ];  do
	arg=$1
	shift
	case $arg in
	-h|--help)
		usage_build
		fin
		;;
	-c)
		configuration=$1
		shift
		;;
	--complete)
		echo "--framework -c"
		fin
		;;
	--framework)
		is_framework=true
		;;
	*)
		release=$arg
		;;
	esac
done

source $REL_TEMP_DIR/config

if test ${release:-undefined} = undefined; then
	usage_build
	fin
fi

trap "teardown_build" EXIT INT TERM
setup_build $release

rm -rf $PRODUCT_BUILD_ROOT
mkdir -p $PRODUCT_BUILD_ROOT

if $is_framework; then
	build_framework $scheme $sdk $configuration
	framework="${PRODUCT_BUILD_ROOT}/${PRODUCT_NAME}.framework"
	if test -d $framework;
	then
		ditto -c -k --sequesterRsrc --keepParent $framework $framework.zip
		logi "zip: ${framework}.zip"
	else
		die "Cound not find any zipping framework: ${framework}"
	fi
else
	build_project $scheme $sdk $configuration
fi
