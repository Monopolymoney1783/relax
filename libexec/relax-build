#!/usr/bin/env bash -eu
# @(#) relax: `build` command
# completions

usage_build() {
	cat <<-EOM
	usage: ${ME} build <release> [--framework <name>] [-c <configuration>]
	options:
	    --framework		: Make a framework bundle from a static library
	    -c			: Specify a configuration
	EOM
}

# build_project <scheme> <sdk> <configuration>
build_project () {
	if [[ $# != 3 ]]; then
		die "build_project: bad argument \"$@\""
	fi
	
	local _scheme=$1
	local _sdk=$2
	local _configuration=$3

	logi "$ARROW Build $TARGETNAME ($_configuration) for $_sdk SDK"

	local params=()
	local params_file=$(get_build_params_file "$scheme" -sdk "$_sdk" -configuration "${_configuration}")
	while read p; do params+=( "$p" ); done < $params_file

	#params=(-project "${PROJECT_FILE_PATH##*/}" -scheme "${_scheme}")

	local build_suffix=$(echo "${_configuration}-${_sdk}")
	local build_settings_file="$PRODUCT_BUILD_ROOT/$build_suffix.settings"
	local logfile="$PRODUCT_BUILD_ROOT/$build_suffix.log"

	xcodebuild -showBuildSettings "${params[@]}" > "$build_settings_file" 

	params+=( clean build )

	logi "Run: xcodebuild ${params[@]}"
	logi "Log: $logfile"

	rm -rf "${logfile}"
	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_VERBOSE".* ]]; then
		if [ -z $REL_LOG_FORMATTER ]; then
			xcodebuild "${params[@]}" 2>&1 |\
				tee "${logfile}"; test ${PIPESTATUS[0]} -eq 0 || return 1
		else
			xcodebuild "${params[@]}" > >(tee -a "${logfile}") 2> >(tee -a "${logfile}" >&2) |\
				${REL_LOG_FORMATTER}; test ${PIPESTATUS[0]} -eq 0 || return 1
		fi
	else
		xcodebuild "${params[@]}" > >(tee -a "${logfile}" >/dev/null) 2> >(tee -a "${logfile}" >&2) &
		XCODEBUILD_PID=$!
		printf "["
		progress_bar $XCODEBUILD_PID
		if wait $XCODEBUILD_PID; then
			printf "] done!\n"
		else
			printf "]\n"
			return 1
		fi
	fi

	load_xcode_build_settings "$params_file"

	local product_path=$BUILT_PRODUCTS_DIR/$FULL_PRODUCT_NAME
	logi "Built Product: $product_path"

	ls "$BUILT_PRODUCTS_DIR" | logd

	cp -a "$product_path" "$PRODUCT_BUILD_ROOT"/

	local dSYM="$BUILT_PRODUCTS_DIR/$DWARF_DSYM_FILE_NAME"

	if [ -d $dSYM ]; then
		cp -a "$dSYM" "$PRODUCT_BUILD_ROOT"/
	fi
}

# make_framework <iphoneos-product-path> <iphonesimulator-product-path> <location>
make_framework () {
	if test $# != 3; then
		die "make_framework: bad argument"
	fi

	local framework_loc="${3}"

	mkdir -p "${framework_loc}/Versions/A/"

	# Join the 2 static libs into 1 and push into the .framework
	xcrun lipo -create \
		"${1}" \
		"${2}" \
		-output "${3}/Versions/A/${framework_name}"

	# Create the path to the real Headers die
	mkdir -p "${framework_loc}/Versions/A/Headers"

	# Create the required symlinks
	/bin/ln -sfh A "${framework_loc}/Versions/Current"
	/bin/ln -sfh Versions/Current/Headers "${framework_loc}/Headers"
	/bin/ln -sfh "Versions/Current/${framework_name}" \
		"${framework_loc}/${framework_name}"

	if [ -d "${TARGET_BUILD_DIR}/$PUBLIC_HEADERS_FOLDER_PATH/" ]; then
		# Copy the public headers into the framework
		/bin/cp -a "${TARGET_BUILD_DIR}/$PUBLIC_HEADERS_FOLDER_PATH/" \
			"${framework_loc}/Versions/A/Headers"
	fi
}


# build_framework <framework_name>
build_framework () {
	if test $# != 1; then
		die "build_framework: bad argument"
	fi

	if [[ $OBJROOT =~ .*DerivedData.* ]] && [ -d "$OBJROOT" ]; then
		logi "$ARROW Clean DerivedData of $TARGETNAME"
		rm -rf $OBJROOT
		logi "Removed $OBJROOT"
	fi

	# If we're already inside this script then die
	if [ -n "$BUILD_CMD_SEMAPHORE" ]; then
		die "Already building framework"
	fi
	export BUILD_CMD_SEMAPHORE=1
	
	local static_lib="lib${PROJECT_NAME}.a"
	local current_sdk sdk_platform other_platform sdk_version 
	local build_project other_built_product
	local framework_location
	
	# 1 - Detect the platform (iphoneos/iphonesimulator) from the SDK name
	if [[ "$sdk" =~ ([A-Za-z]+) ]]; then
		sdk_platform=${BASH_REMATCH[1]}
	else
		die "Could not find platform name from SDK: $sdk"
	fi

	# 2 - Extract the version from the SDK
	if [[ "$sdk" =~ ([0-9]+.*$) ]]; then
		sdk_version=${BASH_REMATCH[1]}
	fi

	# 3 - Detect the other platform
	if [ "$sdk_platform" == "iphoneos" ]; then
		other_platform=iphonesimulator
	else
		other_platform=iphoneos
	fi
	
	# 4 - Build prodcuts
	current_sdk="${sdk_platform}${sdk_version}"
	build_project "$scheme" "$current_sdk" "$configuration"
	built_product="$CODESIGNING_FOLDER_PATH"

	current_sdk="${other_platform}${sdk_version}"
	build_project "$scheme" "$current_sdk" "$configuration"
	other_built_product="$CODESIGNING_FOLDER_PATH"

	# 4 - Make framework
	logi "$ARROW Generate $TARGETNAME Framework ($configuration)"

	framework_location="${PRODUCT_BUILD_ROOT}/${framework_name}.framework"
	make_framework "$built_product" "$other_built_product" "$framework_location"

	# 5 - Install module.modulemap if needed
	# FIXME A `module.modulemap` location is fixed
	if test -f "$HERE/module.modulemap"; then 
		logi "Found ${HERE}/modulemap"
		if ! test -d "${framework_location}/Modules"; then
			mkdir "${framework_location}/Modules"
		fi
		cp -a "$HERE/module.modulemap" "${framework_location}/Modules/"
		logi "Added ${framework_location}/Modules/modulemap"
	fi

	# 6 - Copy the framework to the current workspace
	if test ${framework_location} != "${PRODUCT_BUILD_ROOT}/${framework_name}.framework"; then
		 ditto "${framework_location}" "${PRODUCT_BUILD_ROOT}/${framework_name}.framework"
	fi

	logi "Framework: ${PRODUCT_BUILD_ROOT}/${framework_name}.framework"
}

BUILD_CMD_SEMAPHORE=

is_framework=false
framework_name=

while [ $# -ne 0 ];  do
	arg=$1
	shift
	case $arg in
	-h|--help)
		usage_build
		fin
		;;
	-c)
		configuration=$1
		shift
		;;
	--complete)
		echo "--framework -c"
		fin
		;;
	--framework)
		is_framework=true
		framework_name="$1"
		shift
		;;
	*)
		release=$arg
		;;
	esac
done

source $REL_TEMP_DIR/config

if test ${release:-undefined} = undefined; then
	usage_build
	fin
fi

trap "teardown_build" EXIT INT TERM
setup_build $release


rm -rf $PRODUCT_BUILD_ROOT
mkdir -p $PRODUCT_BUILD_ROOT

if $is_framework; then
	build_framework "$framework_name"
	framework="${PRODUCT_BUILD_ROOT}/${framework_name}.framework"
	if [[ -d $framework ]];
	then
		ditto -c -k --sequesterRsrc --keepParent "$framework" "$framework".zip
		logi "zip: ${framework}.zip"
	else
		die "Cound not find any zipping framework: ${framework}"
	fi
else
	build_project "${scheme}" "${sdk}" "${configuration}"
	logi "Product: $PRODUCT_BUILD_ROOT/$FULL_PRODUCT_NAME"
fi
