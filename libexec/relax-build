#!/bin/bash -eu
# @(#) relax: `build` command
# completions

usage() {
	cat <<-EOM
	usage: ${ME} build <distribution> [--progress] [--framework [<name>]] [--with-simulator] [-c <configuration>]
	options:
	    --progress			Show a progress indicator
	    --framework			Make a framework from a static library with a specified name
	    --with-simulator		Include binaries for iphonesimulator
	    -c				Specify a configuration
	EOM
	fin
}

# build_project <scheme> <sdk> <configuration>
build_project () {
	if [[ $# != 3 ]]; then
		die "build_project: bad argument \"$@\""
	fi
	
	local _scheme=$1
	local _sdk=$2
	local _configuration=$3

	logi "$ARROW Building $TARGETNAME ($_configuration) with $_sdk SDK"

	local params=()
	local params_file=$(get_build_params_file "$scheme" -sdk "$_sdk" -configuration "${_configuration}")

	while read p; do params+=( "$p" ); done < $params_file

	## Disable 'build_options' because `-enable{Address,Thread}Sanitizer` options don't work on 'xcodebuild archive'
	# while read p; do params+=( "$p" ); done < <(relparser -f "$REL_CONFIG_PATH" build_options "$Distribution")

	local build_suffix=$(echo "${_configuration}-${_sdk}")
	local build_settings_file="$PRODUCT_BUILD_ROOT/$build_suffix.settings"
	local logfile="$PRODUCT_BUILD_ROOT/$build_suffix.log"

	xcodebuild -showBuildSettings "${params[@]}" > "$build_settings_file" 

	params+=( clean build )

	logi "$ARROW xcodebuild ${params[@]}"
	logi "Log: $logfile"

	rm -rf "${logfile}"
	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_VERBOSE".* ]]; then
		if [ -z $REL_LOG_FORMATTER ]; then
			xcodebuild "${params[@]}" 2>&1 |\
				tee "${logfile}"; test ${PIPESTATUS[0]} -eq 0 || return 1
		else
			xcodebuild "${params[@]}" > >(tee -a "${logfile}") 2> >(tee -a "${logfile}" >&2) |\
				${REL_LOG_FORMATTER}; test ${PIPESTATUS[0]} -eq 0 || return 1
		fi
	else
		xcodebuild "${params[@]}" > >(tee -a "${logfile}" >/dev/null) 2> >(tee -a "${logfile}" >&2) &
		XCODEBUILD_PID=$!
		if [[ $Show_progress == true ]]; then
			print_progress_time $XCODEBUILD_PID || return 1
		else
			print_progress_time $XCODEBUILD_PID --quiet || return 1
		fi
	fi

	load_xcode_build_settings "$params_file"

	local product_path=$BUILT_PRODUCTS_DIR/$FULL_PRODUCT_NAME
	logv "Built Product: $product_path"

	ls "$BUILT_PRODUCTS_DIR" | logd

	cp -a "$product_path" "$PRODUCT_BUILD_ROOT"/

	local dSYM="$BUILT_PRODUCTS_DIR/$DWARF_DSYM_FILE_NAME"

	if [ -d $dSYM ]; then
		cp -a "$dSYM" "$PRODUCT_BUILD_ROOT"/
	fi
}

merge_frameworks() {
	[ $# == 4 ] || die "Invalid argument"

	local target=$1
	local fw_iphoneos=$2
	local fw_iphonesimulator=$3
	local fw_dest=$4

	[ ! -d "$fw_dest" ] || rm -rf $fw_dest

	logi "$ARROW Creating a universal framework..."

	cp -a "$fw_iphoneos"  "$fw_dest"

	lipo -create -output "${fw_dest}/${target}" "${fw_iphoneos}/${target}" "${fw_iphonesimulator}/${target}"

	if [ -d "${fw_iphonesimulator}/Modules/${target}.swiftmodule" ]; then
		cp -nR "${fw_iphonesimulator}/Modules/${PROJECT_NAME}.swiftmodule/" "${fw_dest}/Modules/${target}.swiftmodule/"
	fi
}

build_framework() {
	if [[ $OBJROOT =~ .*DerivedData.* ]] && [ -d "$OBJROOT" ]; then
		logi "$ARROW Clean DerivedData of $TARGETNAME"
		rm -rf $OBJROOT
		logi "Removed $OBJROOT"
	fi

	# If we're already inside this script then die
	if [ -n "$Build_cmd_semaphore" ]; then
		die "Already building framework"
	fi
	export Build_cmd_semaphore=1


	local current_sdk sdk_platform other_platform sdk_version
	local build_project other_built_product

	logi "$ARROW Generate $TARGETNAME Framework ($configuration)"

	local name=${TARGETNAME}
	local framework_location="${PRODUCT_BUILD_ROOT}/${name}.framework"

	build_project "$scheme" "iphoneos" "$configuration"
	os_fw="$CODESIGNING_FOLDER_PATH"

	if [[ $With_simulator == true ]]; then
		build_project "$scheme" "iphonesimulator" "$configuration"
		local sim_fw="$CODESIGNING_FOLDER_PATH"
		merge_frameworks "$name" "$os_fw" "$sim_fw" "$framework_location"
	else
		cp -a "$os_fw" "$framework_location"
	fi

	dest="${HERE}/${name}.framework"
	rm -rf "$dest"

	# 6 - Copy the framework to the current workspace
	ditto "${framework_location}" "$dest"

	logi "$ARROW Framework: ./${name}.framework"

	if [[ -d "$framework_location" ]];
	then
		ditto -c -k --sequesterRsrc --keepParent "$framework_location" "$dest".zip
		logi "zip: ./${name}.framework.zip"
	else
		die "Cound not find any zipping framework: ${framework_location}"
	fi
}

# make_framework <iphoneos-product-path> <iphonesimulator-product-path> <location>
make_framework () {
	if test $# != 3; then
		die "make_framework: bad argument"
	fi

	local framework_loc="${3}"

	mkdir -p "${framework_loc}/Versions/A/"

	# Join the 2 static libs into 1 and push into the .framework
	if [[ $With_simulator == true ]]; then
		xcrun lipo -create \
			"${1}" \
			"${2}" \
			-output "${3}/Versions/A/${Framework_name}"
	else
		xcrun lipo -create \
			"${1}" \
			-output "${3}/Versions/A/${Framework_name}"
	fi

	# Create the path to the real Headers die
	mkdir -p "${framework_loc}/Versions/A/Headers"

	# Create the required symlinks
	/bin/ln -sfh A "${framework_loc}/Versions/Current"
	/bin/ln -sfh Versions/Current/Headers "${framework_loc}/Headers"
	/bin/ln -sfh "Versions/Current/${Framework_name}" \
		"${framework_loc}/${Framework_name}"

	if [ -d "${TARGET_BUILD_DIR}/$PUBLIC_HEADERS_FOLDER_PATH/" ]; then
		# Copy the public headers into the framework
		/bin/cp -a "${TARGET_BUILD_DIR}/$PUBLIC_HEADERS_FOLDER_PATH/" \
			"${framework_loc}/Versions/A/Headers"
	fi
}

# build_framework_with_static <Framework_name>
build_framework_with_static () {
	if test $# != 1; then
		die "build_framework_with_static: bad argument"
	fi

	if [[ $OBJROOT =~ .*DerivedData.* ]] && [ -d "$OBJROOT" ]; then
		logi "$ARROW Cleaning DerivedData of $TARGETNAME"
		rm -rf $OBJROOT
		logi "Removed $OBJROOT"
	fi

	# If we're already inside this script then die
	if [ -n "$Build_cmd_semaphore" ]; then
		die "Already building framework"
	fi
	export Build_cmd_semaphore=1
	
	# local static_lib="lib${PROJECT_NAME}.a"

	local os_lib sim_lib
	local framework_location="${PRODUCT_BUILD_ROOT}/${Framework_name}.framework"
	

	build_project "$scheme" iphoneos "$configuration"
	os_lib="$CODESIGNING_FOLDER_PATH"

	if [[ $With_simulator == true ]]; then
		build_project "$scheme" iphonesimulator "$configuration"
		sim_lib="$CODESIGNING_FOLDER_PATH"
	fi

	make_framework "$os_lib" "$sim_lib" "$framework_location"

	logi "$ARROW Generating $TARGETNAME Framework ($configuration)"

	# Install module.modulemap if needed
	while IFS= read -r modulemap && [[ -n "$modulemap" ]]
	do
		if cat $modulemap | grep -q "module  *$Framework_name  *{"; then
			logi "Found $modulemap"
			if ! test -d "${framework_location}/Modules"; then
				mkdir "${framework_location}/Modules"
			fi
			cp -a "$modulemap" "${framework_location}/Modules/"
			logi "Added ${framework_location}/Modules/module.modulemap"
			break
		fi
	done < <(find "$HERE" -name module.modulemap)

	dest="${HERE}/${Framework_name}.framework"
	rm -rf "$dest"

	# 6 - Copy the framework to the current workspace
	ditto "${framework_location}" "$dest"

	logi "$ARROW ./${Framework_name}.framework"

	if [[ -d "$framework_location" ]];
	then
		ditto -c -k --sequesterRsrc --keepParent "$framework_location" "$dest".zip
		logi "zip: ./${Framework_name}.framework.zip"
	else
		die "Cound not find any zipping framework: ${framework_location}"
	fi
}

Build_cmd_semaphore=
Is_framework=false
With_simulator=false
Framework_name=
Show_progress=false
Distribution=

while [ $# -ne 0 ];  do
	arg=$1
	shift

	case $arg in
	-h|--help) usage ;;
	-c)
		[[ $# != 0 ]] || usage

		configuration=$1
		shift
		;;
	--completions)
		if [[ $# == 0 ]]; then
			echo "${REL_DISTRIBUTIONS[@]}"
		else
			prev=$1
			if [[  " ${REL_DISTRIBUTIONS[@]} " =~ " $prev " ]]; then
				echo "-c --framework --progress"
			fi
		fi
		fin
		;;
	--progress)
		Show_progress=true
		;;
	--framework)
		Is_framework=true
		;;
	--with-simulator)
		With_simulator=true
		;;
	*)
		Distribution=$arg
		;;
	esac

	case $arg in
	--framework)
		[[ $# != 0 ]] || continue
		[[ ! "$1" =~ -.* ]] || continue
		Framework_name="$1"
		shift
		;;
	esac
done

[[ ${Distribution:-undefined} != undefined ]] || usage

trap "teardown_build" EXIT INT TERM
setup_build $Distribution

rm -rf $PRODUCT_BUILD_ROOT
mkdir -p $PRODUCT_BUILD_ROOT

if [[ -z $Framework_name ]]; then
	Framework_name=$PRODUCT_NAME;
fi

if [[ $PRODUCT_TYPE = "com.apple.product-type.library.static" ]]; then
	if [[ $Is_framework = true ]]; then
		build_framework_with_static "$Framework_name"
	else
		build_project  "${scheme}" "${sdk}" "${configuration}"
		cp -a $BUILT_PRODUCTS_DIR/include $PRODUCT_BUILD_ROOT/
		logi "Product: \n\t$PRODUCT_BUILD_ROOT/$FULL_PRODUCT_NAME\n\t$PRODUCT_BUILD_ROOT/include"
	fi
elif [[ $PRODUCT_TYPE = "com.apple.product-type.framework" ]]; then
	[[ $Is_framework != true ]] || die "'--framework' is applicable only for a static library product"
	build_framework "$Framework_name"
else
	build_project "${scheme}" "${sdk}" "${configuration}"
	logi "Product: $PRODUCT_BUILD_ROOT/$FULL_PRODUCT_NAME"
fi
