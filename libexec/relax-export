#!/bin/bash -eu
# @(#) relax: `export` command
# completions

usage () {
	cat <<-EOM
	Usage: ${ME} export <distribution> [--legacy] [--progress] [<archive-path>]

	By default, the latest archive geenrated \`archive' command will be exported.
	If you encoounter "exportOptionsPlist error for key \`method'" error, please 
	use \`--legacy' option.

	Options:
	    --progress	Show a progress indicator
	    --legacy	Use \`PackageApplication'
	EOM
	fin
}

export_archive () {
	if [[ $# != 1 ]]; then
		die "export_archive: bad argument"
	fi

	logi "$ARROW Exporting $1"

	local export_path="${PRODUCT_BUILD_ROOT}"
	local archive_path="$REL_TEMP_DIR/xcarchive"
	cp -a "$1" "$archive_path"

	local app_path="$(find "$archive_path" -name *.app)";

	if [[ $use_packageapp == false ]]; then
		local raw_info_plist="$REL_TEMP_DIR/Info.plist";
		plutil -convert xml1 -o "$raw_info_plist" "$app_path/Info.plist"
		relparser -f "$REL_CONFIG_PATH" \
			-o "$EXPORT_OPTIONS_PLIST" \
			-plist "$raw_info_plist"  \
			export_options $distribution
		logi "$(cat $EXPORT_OPTIONS_PLIST)"
		logi ""
	fi

	if [[ -f "${app_path}/$ARCHIVED_ENTITLEMENTS_XCENT" ]]; then
		if cat "${app_path}/$ARCHIVED_ENTITLEMENTS_XCENT" | grep -q "$_TEAM_ID"; then
			:
		else
			update_archived_entitlements_xcent "$_TEAM_ID" "$app_path"
		fi
	fi

	if [ -z "$(find "$archive_path" -type f)" ]; then
		die "Failed to acrhive: $archive_path is empty"
	fi

	if test -d "$archive_path/dSYMs"; then
		logi "$ARROW Fetching dSYMs"
	
		local dsym_file="$export_path/$PRODUCT_NAME.dSYMs.zip"
		ditto -c -k --sequesterRsrc --keepParent "$archive_path/dSYMs" "$dsym_file"

		logi "dSYMs.zip: $dsym_file"
	fi

	logi "$ARROW Creating IPA"

	if [ -f "$export_path/$PRODUCT_NAME.ipa" ]; then 
		logi "$WARN Found the same IPA file so it is removed."
		rm -rf "$export_path/$PRODUCT_NAME.ipa"
	fi

	if [[ $use_packageapp == false ]]; then
		local params=()
		params+=(-exportArchive -archivePath "$archive_path" -exportPath "$export_path")
		params+=(-exportOptionsPlist "$EXPORT_OPTIONS_PLIST")

		### Deprecated
		#params=(-exportFormat ipa)
		#params+=(-exportProvisioningProfile "$provisioning_name")

		logfile="$export_path/export.log"
		logi "$ARROW xcodebuild ${params[@]}"
		logi "Log: ${logfile}"

		rm -rf "${logfile}"
		if [[ "${REL_LOG_LEVEL:-undefined}" =~ .*"$REL_LOG_LEVEL_VERBOSE".* ]]; then
			xcodebuild "${params[@]}" > >(tee -a "${logfile}") 2> >(tee -a "${logfile}" >&2)  || return 1
		else
			xcodebuild "${params[@]}" > >(tee -a "${logfile}" >/dev/null) 2> >(tee -a "${logfile}" >&2) &
			XCODEBUILD_PID=$!

			if [[ $show_progress == true ]]; then
				print_progress_time $XCODEBUILD_PID || return 1
			else
				print_progress_time $XCODEBUILD_PID --quiet || return 1
			fi
		fi
	else
		local mobileprovision="$(find_mobileprovision --latest "$provisioning_profile")"
		[[ -n $mobileprovision ]] || die "Not found '$provisioning_profile' provisoning profile"
		xcrun \
			-sdk iphoneos \
			PackageApplication \
			-v "$app_path" \
			-o "$HERE/$export_path/$PRODUCT_NAME.ipa" \
			--embed "PROVISIONING_PROFILE=$mobileprovision" >/dev/null
	fi
	
	local ipa_path=$(find "$export_path" -maxdepth 1 -mindepth 1 -name "*.ipa" -print0 \
		| xargs -0 stat -f"%m %N" | sort -rn \
		| head -1 | cut -d" " -f 2-)
	if [[ ! -n $ipa_path ]]; then
		die "Not found IPA file in $export_path"
	else
		echo "$ipa_path"
	fi
}

prepare_export() {
	local data_root="$REL_RELEASE_ROOT/$distribution/$REL_DATA_DIR"
	mkdir -p "$data_root"
	EXPORT_OPTIONS_PLIST=$REL_TEMP_DIR/ExportOptions.plist
}

[[ $# != 0 ]] || usage

target_archive_file=""
distribution=
show_progress=false
use_packageapp=false

while [ $# -ne 0 ];
do
	arg=$1
	shift
	case $arg in
	-h|--help)
		usage
		;;
	--completions)
		if [[ $# == 0 ]]; then
			echo "${REL_DISTRIBUTIONS[@]}"
		else
			comps=(--progress)
			echo "${comps[@]}"
		fi
		fin
		;;
	--progress)
		show_progress=true
		;;
	--legacy)
		use_packageapp=true
		;;
	*)
		if [[ "$arg" =~ (.*).xcarchive ]]; then
			target_archive_file="$arg"
			if [[ ! -d "$target_archive_file" ]]; then
				die "Not found $target_archive_file"
			fi
		else
			distribution=$arg
		fi
		;;
	esac
done

[[ ${distribution:-undefined} != undefined ]] || usage

if [[ -z "$target_archive_file" ]]; then
	target_archive_file="$(relax-show $distribution archive)"
	if [[ ! -d $target_archive_file ]]; then
		die "Not found the last archive. Please archive '$distribution'"
	fi
fi

trap 'teardown_build' EXIT INT TERM
setup_build --export "$target_archive_file" $distribution
prepare_export

export_archive "$target_archive_file"
