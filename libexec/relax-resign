#!/bin/bash -eu
# Summary: Resign ipa or xcarchive
# completions

usage () {
	cat <<-EOM
	Usage: ${ME} resign [-k|--keychain <keychain>] [-i|--identifer <bundl-identifer>]  -p <mobileprovision-name|path> -c <certificate-name> <ipa|xcarchive>

	Resign a product with a mobileprovision and a certificate
	This command doens't check consistencies between them.
	You can check valid mobileprovision and certificates with the below command.
	    ${ME} ls-profiles
	    ${ME} ls-certs
	
	EOM
	fin
}

# resign_app <app-path>
resign_app () {
	if [ $# != 1 ]; then
		die "resign_app: bad argument "$@""
	fi

	local app_bundle="$1"
	local entitlements=$REL_TEMP_DIR/old_entitlements.plist
	local new_entitlements=$REL_TEMP_DIR/new_entitlements.plist
	local mobileprovision
	local new_bundle_id

	if [[ ! -f "$Mobileprovision" ]]; then
		local mobileprovision_name="$Mobileprovision"
		mobileprovision="$(find_mobileprovision --latest "$mobileprovision_name")"
		[[ -f "$mobileprovision" ]] || die "Not found $mobileprovision_name"
	else
		mobileprovision="$Mobileprovision"
	fi
	

	# Get the current TEAM ID
	local team=$(/usr/bin/codesign -dv "$app_bundle" 2>&1 | sed -ne "s/^TeamIdentifier=\(.*\)/\1/p")
	local bundle_id=$(/usr/bin/codesign -dv "$app_bundle" 2>&1 | sed -ne "s/^Identifier=\(.*\)/\1/p")

	# Get the resign TEAM ID from mobileprovision
	local temp_mobileprovision=$REL_TEMP_DIR/mobileprovision

	dec_provisioning_profile "$mobileprovision" -o "$temp_mobileprovision"

	if [[ ! -z $Bundle_id ]]; then
		local info_plist="$(find "$app_bundle" -name Info.plist -maxdepth 1)"
		local cmd="Set :CFBundleIdentifier $Bundle_id"
		logi "$cmd in ${app_bundle##*/}/${info_plist##*/}"
		/usr/libexec/PlistBuddy -c "$cmd" "$info_plist"

		new_bundle_id=$Bundle_id
		logi "Bundle ID: $bundle_id -> $new_bundle_id"
	else
		new_bundle_id=$bundle_id
		logi "Bundle ID: $bundle_id"
	fi

	local new_team=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" $temp_mobileprovision)

	logi "TeamID: $team -> $new_team"

	# Replace TEAMID in entitlements
	logi "$ARROW Generating entitlements"

	/usr/bin/codesign -d --entitlements :- "$app_bundle" 2>/dev/null > "$entitlements"
	logv "--- Current entitlements ---"
	cat $entitlements | logv

	sed -e "s/${team}/${new_team}/g" "$entitlements" > "$new_entitlements"
	if [[ "$new_bundle_id" != "$bundle_id" ]]; then
		sed -i.bak -e "s/${bundle_id}/${new_bundle_id}/g" "$new_entitlements"
	fi

	logv "--- New Entitlements ---"
	cat $new_entitlements | logi
	
	# Replace the embedded provisioning profile
	cp "$mobileprovision" "$app_bundle"/embedded.mobileprovision

	logi "$ARROW Resigning ${app_bundle##*/}"

	success=false
	set +e
	local stdtemp=$REL_TEMP_DIR/stdtemp
	exec 3> $stdtemp
	while IFS= read -r bundle || [[ -n "$bundle" ]]
	do
		if [[ "${Keychain:-undefined}" == undefined ]]; then
			/usr/bin/codesign -fs "$Certificate" --entitlements="$new_entitlements" "$bundle" 2>&3
		else
			/usr/bin/codesign -fs "$Certificate" --keychain ${Keychain##*/} --entitlements="$new_entitlements" "$bundle" 2>&3
		fi
		if [[ $? != 0 ]]; then
			success=false
			break
		fi
		success=true
		cat $stdtemp | logv
		# Clear stdtemp
		: > $stdtemp
	done < <(find -d "${app_bundle}/.." \
		\( -name "*.app" -o -name "*.appex" -o -name "*.framework" -o -name "*.dylib" \))
	exec 3>&-
	[[ $success = true ]] || die "$(cat $stdtemp)"
	set -e
}

[[ $# != 0 ]] || usage

Mobileprovision=
Bundle_id=
Keychain=
Certificate=

while [ $# -ne 0 ];
do
	arg=$1
	shift
	case $arg in
	-h) 
		usage 
		;;
	--completions)
		comps=(-i --identifer -k --keychain -p -c)
		if [[ $# == 0 ]]; then
			echo "${comps[@]}"
		elif [[ $# == 1 ]]; then
			if [[ " ${comps[@]} " =~ " $1 " ]]; then
				:
			else
				echo "${comps[@]}"
			fi
		else
			prev=$1
			cur=$2
			if [[ " ${comps[@]} " =~ " $prev " ]]; then
				:
			else
				if [[ "${comps[@]}" =~ "$cur" ]]; then
					echo "${comps[@]}"
				fi
			fi
		fi
		fin
		;;
	-i|--identifer)
		[[ $# != 0 ]] || usage
		Bundle_id=$1
		shift
		;;
	-k|--keychain)
		[[ $# != 0 ]] || usage
		Keychain=$1
		shift
		;;
	-p)
		[[ $# != 0 ]] || usage
		Mobileprovision=$1
		shift
		;;
		-c)
		[[ $# != 0 ]] || usage
		Certificate=$1
		shift
		;;
	esac
done

target="${arg##*/}"
target_path="${arg}"
target_parent_path="${arg%/*}"
resign_root=$REL_TEMP_DIR/resign
resign_suffix="-resigned"

logi "$ARROW Resigning $target"

mkdir -p $resign_root

if [[ $target =~ (.*)\.xcarchive  ]]; then
	file_name="${BASH_REMATCH[1]}";

	logd "archive: $target"

	dest_path="$PWD/${file_name}"${resign_suffix}".xcarchive"

	if [[ -f $dest_path ]]; then
		die "Already existing $dest_path"
	fi

	cp -a "$arg" "$resign_root"

	app_path="$(find "$resign_root" -name *.app)";

	resign_app "$app_path"

	cp -a "$resign_root" "$dest_path"

elif [[ $target =~ (.*)\.ipa ]]; then
	file_name="${BASH_REMATCH[1]}";

	logd "ipa: $target"

	dest_path="$PWD/${file_name}"${resign_suffix}".ipa"

	if [[ -f $dest_path ]]; then
		die "Already existing $dest_path"
	fi

	unzip -q "$arg" -d "$resign_root"

	app_path="$(find "$resign_root" -name *.app)";

	resign_app "$app_path"

	# zip
	(
		cd "$resign_root"
		zip -rq "$dest_path" *
	)
else
	die "bad argument"
fi

logi "Resigned: $dest_path"
logi "${GREEN}Success${NC}"
