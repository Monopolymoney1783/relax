#!/usr/bin/env bash -eu
# @(#) relax: utility functions

#################
###  Defines  ###
#################

export REL_TEMP_DIR=
export REL_LOG_LEVEL=
export REL_LOG_LEVEL_DEBUG=DEBUG
export REL_LOG_LEVEL_VERBOSE=VERBOSE
export ARROW="${BLUE}==>${NC}${BOLD}"
export ERR=${RED}Error:${NC}
export WARN=${YELLOW}Warning:${NC}
export NOTE=${BOLD}Note:${NC}

#################
### Functions ###
#################

compare_versions()
{
    local v1=( $(echo "$1" | tr '.' ' ') )
    local v2=( $(echo "$2" | tr '.' ' ') )
    local v1len="${#v1[*]}"
    local v2len="${#v2[*]}"
    local len="$(( $v1len > $v2len ? $v1len : $v2len ))"
    for ((i=0; i<len; i++))
    do
        [ "${v1[i]:-0}" -gt "${v2[i]:-0}" ] && echo -n 1 && return 0
        [ "${v1[i]:-0}" -lt "${v2[i]:-0}" ] && echo -n -1 && return 0
    done
    echo -n 0
    return 0
}

check_toolchain () {
	which xcodebuild > /dev/null || die "Not found xcodebuild"
	which /usr/libexec/PlistBuddy > /dev/null || die "Not found /usr/libexec/PlistBuddy"
	which plutil > /dev/null || die "Not found plutil"
	which codesign > /dev/null || die "Not found codesign"
	which security > /dev/null || die "Not found security"
}

TRAP() {
	local cmd=$1
	trap "${cmd}" EXIT
	trap "${cmd} die \"Interrupted\"" INT HUP
	trap "${cmd} die \"Aborted \"" ABRT
	trap "${cmd} die \"Terminate\"" TERM
}
	

make_temp () {
	if ! test -d "$REL_TEMP_ROOT"; then
		mkdir -p $REL_TEMP_ROOT
	fi
	REL_TEMP_DIR=$(mktemp -d $REL_TEMP_ROOT/XXXXXX)
	export REL_TEMP_DIR
}

clean_temp () {
	#echo "Remove Temp files. $REL_TEMP_DIR"
	if [[ ! -z $REL_TEMP_DIR ]] && [[ -d $REL_TEMP_DIR ]]; then
		rm -rf $REL_TEMP_DIR
	fi
}

teardown () {
	if [ -f $REL_CONFIG ]; then
		find $HERE -name "*.$BAK_EXT" |\
		while IFS= read bak
		do
			cp "$bak" "${bak%.$BAK_EXT}"
			rm "$bak"
		done
	fi
}

fin () {
	if [[ $# -gt 0 ]]; then
		echo -e "$@"
	elif [[ -p /dev/stdin ]]; then
		echo -e "$(</dev/stdin)"
	fi
	exit 0
}

die () {
	if [[ $# -gt 0 ]]; then
		die_with_status 1 "$@"
	elif [[ -p /dev/stdin ]]; then
		die_with_status 1 "$(</dev/stdin)"
	fi
}

die_with_status () {
	status=$1
	shift

	printf "$ERR $@${NC}\n"

	if test $# = 1 && test "$1" = "Interrupted"; then
		echo -e "${RED}Cancelled${NC}"
	else
		echo -e "${RED}Failed${NC}"
	fi

	exit "$status"
}

###############
### Logger  ###
###############

__log () {
	if [[ $# != 0 ]]; then
		echo -e "$@${NC}"
	else
		if [[ -p /dev/stdin ]]; then
			echo -e "$(</dev/stdin)${NC}"
		fi
	fi
}

logv () {
	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_VERBOSE".* ]]; then
		__log "$@"
	fi
}


logd () {
	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_DEBUG".* ]]; then
		__log "$@"
	fi
}

logi () {
	__log "$@"
}


declare -x -f check_toolchain compare_versions 
declare -x -f fin die die_with_status
declare -x -f logi logv logd __log
declare -x -f make_temp clean_temp 
declare -x -f teardown TRAP
