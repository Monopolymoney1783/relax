#!/usr/bin/env bash -eu
# @(#) relax: utility functions

#################
###  Defines  ###
#################

export REL_TEMP_DIR=
export REL_LOG_LEVEL=
export REL_LOG_LEVEL_DEBUG=DEBUG
export REL_LOG_LEVEL_VERBOSE=VERBOSE
export ARROW="${BLUE}==>${NC}${BOLD}"
export ERR=${RED}Error:${NC}
export WARN=${YELLOW}Warning:${NC}
export NOTE=${BOLD}Note:${NC}

#################
### Functions ###
#################

# print_progress_time <pid>
print_progress_time () {
	local pid=$1
	local delay=0.16666666 # 0.016666666 * 10
	local stime=$(date "+%s")
	local i=1

	star="$BOLD"'\xE2\x88\x97'"$NC"
	lbr="$BLUE[$NC"
	rbr="$BLUE]$NC"
	sp=("$lbr$star  $rbr"  "$lbr $star $rbr"  "$lbr  $star$rbr"  "$lbr $star $rbr")

	# Invisible cursor.
	tput civis
	# Don't echo back any chars typed.
	stty -echo

	while ps -p $pid | grep -q $pid; do
		now=$(date "+%s")
		dt=$(date -r "$(( $now - $stime - 32400))" "+%T")
		printf "\b${sp[i++%${#sp[*]}]} Time: $dt\r"
		sleep $delay
	done

	tput el # Clear to end of line
	printf "Time: $dt\n"

	# Retore tty and tput
	stty echo
	tput cnorm

	if wait $pid; then
		return 0
	else
		return 1
	fi
}

# progress_bar <pid>
progress_bar()
{
	local pid=$1
	local delay=0.75
	printf "["
	while ps -p $pid | grep -q $pid; do
		printf  "â–“"
		sleep $delay
	done
	if wait $pid; then
		printf "] done!\n"
		return 0
	else
		printf "]\n"
		return 1
	fi
}

check_toolchain () {
	which xcodebuild > /dev/null || die "Not found xcodebuild"
	which /usr/libexec/PlistBuddy > /dev/null || die "Not found /usr/libexec/PlistBuddy"
	which plutil > /dev/null || die "Not found plutil"
	which codesign > /dev/null || die "Not found codesign"
}

pop_all() {
	local arr=($(dirs))
	local pc=${#arr[@]}
	if test $pc -gt 1;
	then
		for i in $(seq $(( $pc - 1)));
		do
			popd > /dev/null;
		done
	fi
}

TRAP() {
	local cmd=$1
	trap "${cmd}" EXIT
	trap "${cmd} die \"Interrupted\"" INT
	trap "${cmd} die \"Terminate\"" TERM
}
	

make_temp () {
	if ! test -d "$REL_TEMP_ROOT"; then
		mkdir -p $REL_TEMP_ROOT
	fi
	REL_TEMP_DIR=$(mktemp -d $REL_TEMP_ROOT/XXXXXX)
	export REL_TEMP_DIR
}

clean_temp () {
	#echo "Remove Temp files. $REL_TEMP_DIR"
	if [[ ! -z $REL_TEMP_DIR ]] && [[ -d $REL_TEMP_DIR ]]; then
		rm -rf $REL_TEMP_DIR
	fi
}

teardown () {
	pop_all
	if [ -f $REL_CONFIG ]; then
		find $HERE -name "*.$BAK_EXT" |\
		while IFS= read bak
		do
			cp "$bak" "${bak%.$BAK_EXT}"
			rm "$bak"
		done
	fi
}

fin () {
	if [ $# -gt 0 ]; then
		echo -e "$@"
	fi
	exit 0
}

die () {
	die_with_status 1 "$@"
}

die_with_status () {
	status=$1
	shift

	if test $# = 1 && test "$1" = "Interrupted"; then
		printf >&2 "$*\n"
		echo -e "${RED}Cancelled${NC}"
		exit "$status"
	fi

	printf >&2 "$ERR $*\n"
	echo -e "${RED}Failed${NC}"
	exit "$status"
}

###############
### Logger  ###
###############

__log () {
	if [[ $# != 0 ]]; then
		echo -e "$@${NC}"
	else
		if [[ -p /dev/stdin ]]; then
			cat -
		fi
	fi
}

logv () {
	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_VERBOSE".* ]]; then
		__log "$@"
	fi
}


logd () {
	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_DEBUG".* ]]; then
		__log "$@"
	fi
}

logi () {
	__log "$@"
}

declare -x -f print_progress_time progress_bar
declare -x -f check_toolchain 
declare -x -f fin die die_with_status
declare -x -f logi logv logd __log
declare -x -f make_temp pop_all clean_temp TRAP
